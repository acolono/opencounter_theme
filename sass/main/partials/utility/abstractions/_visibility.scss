// text-indent doesn"t work on inline elements.
// set wrapping element on inline-block!
// sass-lint:disable no-important

@mixin text-invisible() {
  text-indent: -9999em;
}

%text-invisible {
  @include text-invisible;
}

// Hide elements from all users.// 
// Used for elements which should not be immediately displayed to any user. An
// example would be a collapsible fieldset that will be expanded with a click
// from a user. The effect of this class can be toggled with the jQuery show()
// and hide() functions.
%element-hidden {
  display: none;
}

/// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
  [data-whatinput="mouse"] & {
    outline: 0;
  }
}


// Hide elements visually, but keep them available for screen-readers.
// 
// Used for information required for screen-reader users to understand and use
// the site where visual display is undesirable. Information provided in this
// manner should be kept concise, to avoid unnecessary burden on the user.
// "!important" is used to prevent unintentional overrides.
@mixin element-invisible() {
  position: absolute !important;
  left: 0;
  top: 0;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
}

%element-invisible {
  @include element-invisible;
}

@mixin element-visible() {
  left: auto;
  top: auto;
  position: relative !important;
  clip: auto; /* IE6, IE7 */
  overflow: auto;
  height: auto;
}

%element-visible {
  @include element-visible;
}

// The .element-focusable class extends the .element-invisible class to allow
// the element to be focusable when navigated to via the keyboard.
%element-focusable:active,
%element-focusable:focus {
  position: static !important;
  clip: auto;
  overflow: visible;
  height: auto;
}


// Visually disable an element
@mixin element-disabled() {
  opacity: 0.4;
  cursor: not-allowed !important;
}

@mixin content-disabled() {
  opacity: 0.4;
}
// sass-lint:enable no-important
